{"version":3,"sources":["HomePage.js","Users.js","Routes.js","CallTodos.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","props","className","id","UserOne","allTodos","map","elt","key","userId","title","completed","UserTwo","UserThree","UserFour","UserFive","Routes","user1","data","filter","user2","user3","user4","user5","exact","path","NavBar","activeClassName","to","CallTodos","useState","dataTodos","setDataTodos","isError","setIsError","useEffect","a","axios","result","console","log","fetchData","App","Footer","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.02689c28.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const HomePage = props => {\r\n\r\n  return (\r\n\r\n    <div className=\"card border-primary \" id='home'>\r\n      <div className=\"card-header border-primary\">\r\n        <h4>Welcome on this TODOS site</h4>\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">Please use navigation menu for call Todos of each users</h5>\r\n        <p className=\"card-text\">They are 5 users, each of them have 20 todos. Todos with red footer are non-completed & green footer are completed .</p>\r\n      </div>\r\n      <div className=\"card-footer text-muted border-primary\">\r\n        You are on the HomePage - Switch with navigation between Users or back on this page\r\n                </div>\r\n    </div>\r\n\r\n  )\r\n}","import React, { Fragment } from 'react'\r\n\r\nexport const UserOne = props => {\r\n\r\n  return (\r\n    <Fragment>\r\n\r\n      {props.allTodos.map(elt => <div key={elt.id} className=\"card text-center mt-4\">\r\n        <div className='card-body  m-1' >\r\n          <h5 className=\"card-title\">{`Todo create by : User-${elt.userId}`}</h5><hr />\r\n          <p className=\"card-text\">{elt.title}</p>\r\n          <p className={elt.completed === true ? 'card-text card-footer bg-danger' : 'card-text card-footer bg-success '}>{`ID : ${elt.id}`}\r\n            {elt.completed === true ? <span className='float-right text-light'>Completed</span> : <span className='float-right'> non-completed</span>}\r\n          </p>\r\n        </div>\r\n      </div>)}\r\n    </Fragment>\r\n  )\r\n\r\n}\r\n\r\nexport const UserTwo = props => {\r\n\r\n  return (\r\n    <Fragment>\r\n      {props.allTodos.map(elt => <div key={elt.id} className=\"card text-center mt-4\">\r\n        <div className='card-body  m-1' >\r\n          <h5 className=\"card-title\">{`UserName : User-${elt.userId}`}</h5><hr />\r\n          <p className=\"card-text\">{elt.title}</p>\r\n          <p className={elt.completed === true ? 'card-text card-footer bg-danger' : 'card-text card-footer bg-success '}>{`ID : ${elt.id}`}\r\n            {elt.completed === true ? <span className='float-right text-light'>Completed</span> : <span className='float-right'> non-completed</span>}\r\n          </p>\r\n        </div>\r\n      </div>)}\r\n    </Fragment>\r\n  )\r\n\r\n}\r\n\r\nexport const UserThree = props => {\r\n\r\n  return (\r\n    <Fragment>\r\n      {props.allTodos.map(elt => <div key={elt.id} className=\"card text-center mt-4\">\r\n        <div className='card-body  m-1' >\r\n          <h5 className=\"card-title\">{`Todo create by : User-${elt.userId}`}</h5><hr />\r\n          <p className=\"card-text\">{elt.title}</p>\r\n          <p className={elt.completed === true ? 'card-text card-footer bg-danger' : 'card-text card-footer bg-success '}>{`ID : ${elt.id}`}\r\n            {elt.completed === true ? <span className='float-right text-light'>Completed</span> : <span className='float-right'> non-completed</span>}\r\n          </p>\r\n        </div>\r\n      </div>)}\r\n    </Fragment>\r\n  )\r\n\r\n}\r\n\r\nexport const UserFour = props => {\r\n\r\n  return (\r\n    <Fragment>\r\n      {props.allTodos.map(elt => <div key={elt.id} className=\"card text-center mt-4\">\r\n        <div className='card-body  m-1' >\r\n          <h5 className=\"card-title\">{`UserName : User-${elt.userId}`}</h5><hr />\r\n          <p className=\"card-text\">{elt.title}</p>\r\n          <p className={elt.completed === true ? 'card-text card-footer bg-danger' : 'card-text card-footer bg-success '}>{`ID : ${elt.id}`}\r\n            {elt.completed === true ? <span className='float-right text-light'>Completed</span> : <span className='float-right'> non-completed</span>}\r\n          </p>\r\n        </div>\r\n      </div>)}\r\n    </Fragment>\r\n  )\r\n\r\n}\r\nexport const UserFive = props => {\r\n\r\n  return (\r\n    <Fragment>\r\n      {props.allTodos.map(elt => <div key={elt.id} className=\"card text-center mt-4\">\r\n        <div className='card-body  m-1' >\r\n          <h5 className=\"card-title\">{`Todo create by : User-${elt.userId}`}</h5><hr />\r\n          <p className=\"card-text\">{elt.title}</p>\r\n          <p className={elt.completed === true ? 'card-text card-footer bg-danger' : 'card-text card-footer bg-success '}>{`ID : ${elt.id}`}\r\n            {elt.completed === true ? <span className='float-right text-light'>Completed</span> : <span className='float-right'> non-completed</span>}\r\n          </p>\r\n        </div>\r\n      </div>)}\r\n    </Fragment>\r\n  )\r\n\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport { HomePage } from './HomePage'\r\nimport { UserOne, UserTwo, UserThree, UserFour, UserFive } from './Users'\r\n\r\nexport const Routes = props => {\r\n  const user1 = props.data.filter(elt => elt.userId === 1)\r\n  const user2 = props.data.filter(elt => elt.userId === 2)\r\n  const user3 = props.data.filter(elt => elt.userId === 3)\r\n  const user4 = props.data.filter(elt => elt.userId === 4)\r\n  const user5 = props.data.filter(elt => elt.userId === 5)\r\n  return (\r\n    <Switch>\r\n      <Route exact path='/' ><HomePage /></Route>\r\n      <Route path='/one'><UserOne allTodos={user1} /></Route>\r\n      <Route path='/two'><UserTwo allTodos={user2} /></Route>\r\n      <Route path='/three'><UserThree allTodos={user3} /></Route>\r\n      <Route path='/four'><UserFour allTodos={user4} /></Route>\r\n      <Route path='/five'><UserFive allTodos={user5} /></Route>\r\n    </Switch>\r\n\r\n  )\r\n} ","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { Routes } from './Routes'\r\n\r\nconst NavBar = props => {\r\n\r\n  return (\r\n\r\n    <nav className=\"navbar navbar-dark\">\r\n      <h4 className='text-light'>New Todos App 2020</h4>\r\n      <div className=\"navigation\">\r\n        <ul className=\"list-group list-group-horizontal\">\r\n          <li id='un' className=\"list-group-item nav-item mr-4 lien\"><NavLink exact activeClassName=\"selected\" to='/'>HomePage </NavLink></li>\r\n          <li id='deux' className=\"list-group-item nav-item lien \">  <NavLink exact activeClassName=\"selected\" to='/one'>User-1</NavLink></li>\r\n          <li id='trois' className=\"list-group-item nav-item lien\"> <NavLink exact activeClassName=\"selected\" to='/two'>User-2</NavLink></li>\r\n          <li id='quatre' className=\"list-group-item nav-item lien\"> <NavLink exact activeClassName=\"selected\" to='/three'>User-3</NavLink></li>\r\n          <li id='cinq' className=\"list-group-item nav-item lien\"><NavLink exact activeClassName=\"selected\" to='/four'> User-4</NavLink></li>\r\n          <li id='six' className=\"list-group-item nav-item lien\"> <NavLink exact activeClassName=\"selected\" to='/five'>User-5</NavLink></li>\r\n        </ul>\r\n      </div>\r\n\r\n    </nav>\r\n\r\n  )\r\n}\r\nexport const CallTodos = () => {\r\n\r\n  const [dataTodos, setDataTodos] = useState([])\r\n  const [isError, setIsError] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsError(false)\r\n      try {\r\n        const result = await axios('https://jsonplaceholder.typicode.com/todos')\r\n        setDataTodos(result.data)\r\n      } catch (error) {\r\n        setIsError(true)\r\n        console.log(error)\r\n\r\n      }\r\n    }\r\n    fetchData()\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      <div className='card-columns'><Routes data={dataTodos} /></div>\r\n      {isError && <h3 className='mt-3'>Quelque chose semble perturber l'appel de l'API une erreur est survenue - Voir la console pour plus de détail sur le problème ...</h3>}\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport { CallTodos } from './CallTodos'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n          <CallTodos />\n          <Footer />\n    </div>\n  );\n}\n\nexport default App;\n\nconst Footer = () =>{\n  return(\n      <div className='jumbotron footer py-2'>\n          <h4>Todos React App</h4>\n         <p className='lead'>I’ve been learning React for a few months and I’m doing a few little apps like this to practice React.<br/>\n         For this app I would like to try  react-router-dom & HashRouter</p>\n         <p>I used : Create-React-App - React-Router-Dom - Bootstrap IV - Axios - <a href=\"https://jsonplaceholder.typicode.com/\">Json placeHolder API</a></p>\n         <p>© Fevrier 2020 Laurent CAMINADE</p>\n      </div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}